// THIS FILE WAS GENERATED BY `xtp-go-bindgen`. DO NOT EDIT.
package main

import (
	pdk "github.com/extism/go-pdk"
)

//export handle
func _Handle() int32 {
	var err error
	_ = err
	pdk.Log(pdk.LogDebug, "Handle: getting JSON input")
	var input IncomingEvent
	err = pdk.InputJSON(&input)
	if err != nil {
		pdk.SetError(err)
		return -1
	}

	pdk.Log(pdk.LogDebug, "Handle: calling implementation function")
	err = Handle(input)
	if err != nil {
		pdk.SetError(err)
		return -1
	}

	pdk.Log(pdk.LogDebug, "Handle: returning")
	return 0
}

//go:wasmimport extism:host/user react
func _React(uint64) uint64

//go:wasmimport extism:host/user request
func _Request(uint64) uint64

//go:wasmimport extism:host/user sendMessage
func _SendMessage(uint64) uint64

//go:wasmimport extism:host/user watchMessage
func _WatchMessage(uint64) uint64

// A result.
type HandlerResult struct {
	// An error code. Zero indicates success. Negative numbers indicate failure.
	ErrorCode int64 `json:"errorCode"`
	// An id for the result
	Id string `json:"id"`
}

// An incoming event
type IncomingEvent struct {
	// The channel the message was received in
	Channel string `json:"channel"`
	// The kind of event (one of "content", "watch:reference", "watch:reaction:added", "watch:reaction:removed", "http:response")
	Kind string `json:"kind"`
	// An incoming message
	Message *IncomingMessage `json:"message"`
	// A reaction happened
	Reaction *IncomingReaction `json:"reaction"`
	// We received a response
	Response *IncomingResponse `json:"response"`
}

// An incoming message
type IncomingMessage struct {
	// The author of the message
	Author string `json:"author"`
	// The message text
	Content string `json:"content"`
	// An id identifying the message.
	Id string `json:"id"`
	// The id of the message to which this message replies
	Reference *string `json:"reference"`
}

// A reaction happened
type IncomingReaction struct {
	// The username that reacted
	From string `json:"from"`
	// An incoming message
	Message IncomingMessage `json:"message"`
	// The emoji reaction
	With string `json:"with"`
}

// We received a response
type IncomingResponse struct {
	// the http body
	Body string `json:"body"`
	// the http headers
	Headers map[string]interface{} `json:"headers"`
	// the identifier the plugin sent
	Id string `json:"id"`
	// the http status code
	Status int64 `json:"status"`
}

// An outgoing message
type OutgoingMessage struct {
	// The channel the message was received in
	Channel *string `json:"channel"`
	// The message text
	Message string `json:"message"`
	// A message ID to reply to
	Reply *string `json:"reply"`
}

// send a reaction
type OutgoingReaction struct {
	// the message id
	MessageId string `json:"messageId"`
	// The emoji reaction
	With string `json:"with"`
}

// An HTTP request
type OutgoingRequest struct {
	// the http body
	Body string `json:"body"`
	// the http headers
	Headers map[string]interface{} `json:"headers"`
	// the http method
	Method string `json:"method"`
	// the url
	Url string `json:"url"`
}

// React
// It takes input of OutgoingReaction (send a reaction)
// And it returns an output HandlerResult (A result.)
func React(input OutgoingReaction) (*HandlerResult, error) {
	var err error
	_ = err
	mem, err := pdk.AllocateJSON(&input)
	if err != nil {
		return nil, err
	}

	offs := _React(mem.Offset())

	var output HandlerResult
	err = pdk.JSONFrom(offs, &output)
	if err != nil {
		return nil, err
	}
	return &output, nil

}

// Request
// It takes input of OutgoingRequest (An HTTP request)
// And it returns an output HandlerResult (A result.)
func Request(input OutgoingRequest) (*HandlerResult, error) {
	var err error
	_ = err
	mem, err := pdk.AllocateJSON(&input)
	if err != nil {
		return nil, err
	}

	offs := _Request(mem.Offset())

	var output HandlerResult
	err = pdk.JSONFrom(offs, &output)
	if err != nil {
		return nil, err
	}
	return &output, nil

}

// SendMessage
// It takes input of OutgoingMessage (An outgoing message)
// And it returns an output HandlerResult (A result.)
func SendMessage(input OutgoingMessage) (*HandlerResult, error) {
	var err error
	_ = err
	mem, err := pdk.AllocateJSON(&input)
	if err != nil {
		return nil, err
	}

	offs := _SendMessage(mem.Offset())

	var output HandlerResult
	err = pdk.JSONFrom(offs, &output)
	if err != nil {
		return nil, err
	}
	return &output, nil

}

// WatchMessage
// It takes input of string (the id of a message to watch)
// And it returns an output HandlerResult (A result.)
func WatchMessage(input string) (*HandlerResult, error) {
	var err error
	_ = err
	mem := pdk.AllocateString(input)

	offs := _WatchMessage(mem.Offset())

	var output HandlerResult
	err = pdk.JSONFrom(offs, &output)
	if err != nil {
		return nil, err
	}
	return &output, nil

}

// Note: leave this in place, as the Go compiler will find the `export` function as the entrypoint.
func main() {}
