// THIS FILE WAS GENERATED BY `xtp-cpp-bindgen`. DO NOT EDIT.
#include <chrono>
#include <cstddef>
#include <expected>
#include <jsoncons/json.hpp>
#include <memory>
#include <span>
#include <stdint.h>
#include <string>
#include <string_view>
#include <vector>

namespace pdk {

// A result.
struct HandlerResult {
  // An id for the result
  std::optional<std::string> id;
  // An error code. Zero indicates success. Negative numbers indicate failure.
  int64_t errorCode;
};

// An incoming message
struct IncomingMessage {
  // The author of the message
  std::optional<std::string> author;
  // The message text
  std::string content;
  // An id identifying the message.
  std::string id;
  // The id of the message to which this message replies
  std::optional<std::string> reference;
};

// A reaction happened
struct IncomingReaction {
  // An incoming message
  IncomingMessage message;
  // The username that reacted
  std::string from;
  // The emoji reaction
  std::string with;
};

// We received a response
struct IncomingResponse {
  // the http headers
  jsoncons::json headers;
  // the http body
  std::string body;
  // the identifier the plugin sent
  std::string id;
  // the http status code
  int64_t status;
};

// An incoming event
struct IncomingEvent {
  // A reaction happened
  std::optional<IncomingReaction> reaction;
  // An incoming message
  std::optional<IncomingMessage> message;
  // We received a response
  std::optional<IncomingResponse> response;
  // The channel the message was received in
  std::string channel;
  std::string guild;
  // The kind of event (one of "content", "watch:reference",
  // "watch:reaction:added", "watch:reaction:removed", "http:response")
  std::string kind;
};

// An outgoing message
struct OutgoingMessage {
  // The channel the message was received in
  std::optional<std::string> channel;
  // The message text
  std::string message;
  // A message ID to reply to
  std::optional<std::string> reply;
};

// send a reaction
struct OutgoingReaction {
  // the message id
  std::string messageId;
  // The emoji reaction
  std::string with;
};

// An HTTP request
struct OutgoingRequest {
  // the http headers
  jsoncons::json headers;
  // the http body
  std::string body;
  // the http method
  std::string method;
  // the url
  std::string url;
};

// host function errors
enum class Error { extism, host_null, not_json, json_null, not_implemented };

/**
 *
 *
 * @param input send a reaction
 * @return A result.
 */
std::expected<HandlerResult, Error> react(const OutgoingReaction &input);

/**
 *
 *
 * @param input An HTTP request
 * @return A result.
 */
std::expected<HandlerResult, Error> request(const OutgoingRequest &input);

/**
 *
 *
 * @param input An outgoing message
 * @return A result.
 */
std::expected<HandlerResult, Error> sendMessage(const OutgoingMessage &input);

/**
 *
 *
 * @param input the id of a message to watch
 * @return A result.
 */
std::expected<HandlerResult, Error> watchMessage(std::string_view input);

} // namespace pdk

namespace impl {

/**
 *
 *
 * @param input An incoming event
 */
std::expected<void, pdk::Error> handle(pdk::IncomingEvent &&input);

} // namespace impl
