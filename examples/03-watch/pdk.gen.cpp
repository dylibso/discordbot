// THIS FILE WAS GENERATED BY `xtp-cpp-bindgen`. DO NOT EDIT.
#define EXTISM_CPP_IMPLEMENTATION
#include "pdk.gen.hpp"
#include <extism-pdk.hpp>
#include <jsoncons/json.hpp>
#include <magic_enum.hpp>

JSONCONS_ALL_MEMBER_TRAITS(pdk::HandlerResult, id, errorCode)
JSONCONS_N_MEMBER_TRAITS(pdk::IncomingMessage, 3, author, content, id,
                         reference)
JSONCONS_ALL_MEMBER_TRAITS(pdk::IncomingReaction, message, from, with)
JSONCONS_ALL_MEMBER_TRAITS(pdk::IncomingResponse, headers, body, id, status)
JSONCONS_N_MEMBER_TRAITS(pdk::IncomingEvent, 2, channel, kind, reaction,
                         message, response)
JSONCONS_ALL_MEMBER_TRAITS(pdk::OutgoingMessage, channel, message, reply)
JSONCONS_ALL_MEMBER_TRAITS(pdk::OutgoingReaction, messageId, with)
JSONCONS_ALL_MEMBER_TRAITS(pdk::OutgoingRequest, headers, body, method, url)

namespace pdk {

namespace exports {

int32_t EXTISM_EXPORTED_FUNCTION(handle) {
  extism::log_debug("handle: getting JSON input");
  auto input_str = extism::input().string();
  if (!input_str.size()) {
    extism::error_set("0 length input cannot be json");
    return -1;
  }
  auto input = jsoncons::decode_json<std::unique_ptr<IncomingEvent>>(
      std::move(input_str));
  if (!input) {
    extism::error_set("null not allowed as input");
    return -2;
  }
  extism::log_debug("handle: calling implementation function");
  auto result = impl::handle(std::move(*input));
  if (!result) {
    extism::error_set("handle: failed");
    return -3;
  }
  extism::log_debug("handle: returning");
  return 0;
}

} // namespace exports

namespace imports {

EXTISM_IMPORT_USER("react")
extern extism::imports::RawHandle react(extism::imports::RawHandle);

EXTISM_IMPORT_USER("request")
extern extism::imports::RawHandle request(extism::imports::RawHandle);

EXTISM_IMPORT_USER("sendMessage")
extern extism::imports::RawHandle sendMessage(extism::imports::RawHandle);

EXTISM_IMPORT_USER("watchMessage")
extern extism::imports::RawHandle watchMessage(extism::imports::RawHandle);

} // namespace imports

std::expected<HandlerResult, Error> react(const OutgoingReaction &input) {
  std::string encoded;
  jsoncons::encode_json(input, encoded);
  auto in_handle = extism::UniqueHandle<char>::from(encoded);
  if (!in_handle) {
    return std::unexpected(Error::extism);
  }
  auto out_raw = imports::react(*in_handle);
  if (!out_raw) {
    return std::unexpected(Error::host_null);
  }
  extism::UniqueHandle<char> out_handle(out_raw);
  auto out_string = out_handle.string();
  if (!out_string.size()) {
    return std::unexpected(Error::not_json);
  }
  return jsoncons::decode_json<HandlerResult>(std::move(out_string));
}

std::expected<HandlerResult, Error> request(const OutgoingRequest &input) {
  std::string encoded;
  jsoncons::encode_json(input, encoded);
  auto in_handle = extism::UniqueHandle<char>::from(encoded);
  if (!in_handle) {
    return std::unexpected(Error::extism);
  }
  auto out_raw = imports::request(*in_handle);
  if (!out_raw) {
    return std::unexpected(Error::host_null);
  }
  extism::UniqueHandle<char> out_handle(out_raw);
  auto out_string = out_handle.string();
  if (!out_string.size()) {
    return std::unexpected(Error::not_json);
  }
  return jsoncons::decode_json<HandlerResult>(std::move(out_string));
}

std::expected<HandlerResult, Error> sendMessage(const OutgoingMessage &input) {
  std::string encoded;
  jsoncons::encode_json(input, encoded);
  auto in_handle = extism::UniqueHandle<char>::from(encoded);
  if (!in_handle) {
    return std::unexpected(Error::extism);
  }
  auto out_raw = imports::sendMessage(*in_handle);
  if (!out_raw) {
    return std::unexpected(Error::host_null);
  }
  extism::UniqueHandle<char> out_handle(out_raw);
  auto out_string = out_handle.string();
  if (!out_string.size()) {
    return std::unexpected(Error::not_json);
  }
  return jsoncons::decode_json<HandlerResult>(std::move(out_string));
}

std::expected<HandlerResult, Error> watchMessage(std::string_view input) {
  auto &encoded = input;
  auto in_handle = extism::UniqueHandle<char>::from(encoded);
  if (!in_handle) {
    return std::unexpected(Error::extism);
  }
  auto out_raw = imports::watchMessage(*in_handle);
  if (!out_raw) {
    return std::unexpected(Error::host_null);
  }
  extism::UniqueHandle<char> out_handle(out_raw);
  auto out_string = out_handle.string();
  if (!out_string.size()) {
    return std::unexpected(Error::not_json);
  }
  return jsoncons::decode_json<HandlerResult>(std::move(out_string));
}

} // namespace pdk
